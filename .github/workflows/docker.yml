name: Build and Test Docker Images

on:
  push:
    branches: [ "main" ]
  schedule:
    - cron: '20 03 * * *'  # 3:20am everyday

jobs:
  build_and_push_docker_images:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        containerdistro: [ alpine, debian, centos ]
        arches: [ linux/amd64, linux/arm64, linux/arm/v7, linux/ppc64le ]
        exclude:
          - containerdistro: debian
            arches: linux/arm64
          - containerdistro: debian
            arches: linux/arm/v7
          - containerdistro: debian
            arches: linux/ppc64le
          - containerdistro: centos
            arches: linux/arm64
          - containerdistro: centos
            arches: linux/arm/v7
          - containerdistro: centos
            arches: linux/ppc64le
        include:
          - arches: linux/amd64
            arch-tag: amd64
          - arches: linux/arm64
            arch-tag: arm64
          - arches: linux/arm/v7
            arch-tag: armv7
          - arches: linux/ppc64le
            arch-tag: ppc64le

    permissions:
      contents: read
      packages: write
      security-events: write

    name: Docker Images
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
            submodules: recursive

      - name: Install qemu
        run: |
          sudo apt-get update
          sudo apt-get install qemu qemu-system-arm qemu-system-ppc qemu-user-static -y

      # BUILD

      - name: Get patches
        run: |
          chmod u+x scripts/*
          ./scripts/get-patches.sh
          ./scripts/apply-patches.sh
          ./scripts/fix-git-compile.sh

      - name: Build Image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: invidious
          tags: ${{ matrix.containerdistro }}-${{ matrix.arch-tag }}
          containerfiles: Dockerfile.${{ matrix.containerdistro }}
          platforms: ${{ matrix.arches }}
          context: invidious

      # PUSH

      - name: Push To GHCR
        id: push-to-ghcr
        uses: redhat-actions/push-to-registry@v2
        with:
          username: ${{ github.actor }}
          password: ${{ github.token }}
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ghcr.io/${{ github.repository_owner }}

      # SIGN

      - uses: sigstore/cosign-installer@v3.1.2

      - name: Sign GHCR Image
        run:  |
          cosign login ghcr.io -u ${{ github.actor }} -p ${{ github.token }}
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ghcr.io/${{ github.repository_owner }}/${{ steps.build-image.outputs.image }}@${GHCR_TAGS}
        env:
          COSIGN_EXPERIMENTAL: false
          GHCR_TAGS: ${{ steps.push-to-ghcr.outputs.digest }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      # SCAN

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository_owner }}/${{ steps.build-image.outputs.image }}@${GHCR_TAGS}'
          format: 'sarif'
          output: 'trivy-results.sarif'
        env:
          GHCR_TAGS: ${{ steps.push-to-ghcr.outputs.digest }}

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      # PRINT

      - name: Print image URLs
        run:  |
          echo "Image pushed to ${{ steps.push-to-ghcr.outputs.registry-paths }}"
